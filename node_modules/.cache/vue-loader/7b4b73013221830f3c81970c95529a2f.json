{"remainingRequest":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/src/views/curso/Tema1.vue?vue&type=template&id=1e9c209e&lang=pug&","dependencies":[{"path":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/src/views/curso/Tema1.vue","mtime":1756098451982},{"path":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U2_Introduccion_administracion/U2_Introduccion_administracion/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}